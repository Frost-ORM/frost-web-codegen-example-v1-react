import { faker } from "@faker-js/faker";
import {
	Club,
	ClubType,
	Course,
	DifficultyLevel,
	Duration,
	Professor,
	ProfessorConnectOptions,
	SchoolYear,
	Student,
	StudentConnectOptions,
} from "@frost-orm/frost-web-client";
import { ref, update } from "@firebase/database";
import { fireDB, FrostApp } from "./frost";

/*
 * A set of clubs at a certain school
 */
export const clubsData: Club[] = [
	{
		id: "club-glee-01",
		name: "Glee",
		type: ClubType.CREATIVE,
		roomId: "music-room-01",
	},
	{
		id: "club-football-01",
		name: "Football",
		type: ClubType.SPORTS,
		roomId: "football-field-01",
	},
	{
		id: "club-chess-01",
		name: "Chess",
		type: ClubType.STEM,
		roomId: "rec-room-06",
	},
	{
		id: "club-drama-01",
		name: "Drama Club",
		type: ClubType.CREATIVE,
		roomId: "theatre-01",
	},
];

/*
 * A set of courses at a certain school
 */
export const coursesData: Course[] = [
	// id: `course-${department_code}-${course_code}-${semester}-${year}`
	{
		id: "course-bs-calculus_01-1-2022",
		name: "Calculus 1",
		duration: Duration.FULL_SEMESTER,
		department: "basic-science/math",
		difficultyLevel: DifficultyLevel.INTRODUCTORY,
	},
	{
		id: "course-bs-calculus_02-2-2022",
		name: "Calculus 2",
		duration: Duration.FULL_SEMESTER,
		department: "basic-science/math",
		difficultyLevel: DifficultyLevel.INTERMEDIATE,
	},
	{
		id: "course-bs-calculus_03-x-2022",
		name: "Transcendental Calculus",
		duration: Duration.FULL_YEAR,
		department: "basic-science/math",
		difficultyLevel: DifficultyLevel.ADVANCED_PLACEMENT,
	},

	{
		id: "course-bs-algebra_01-1-2022",
		name: "Algebra",
		duration: Duration.FULL_SEMESTER,
		department: "basic-science/math",
		difficultyLevel: DifficultyLevel.INTERMEDIATE,
	},

	{
		id: "course-bs-chemistry_01-1-2022",
		name: "Chemistry",
		duration: Duration.FULL_SEMESTER,
		department: "basic-science/chemistry",
		difficultyLevel: DifficultyLevel.INTERMEDIATE,
	},
	{
		id: "course-bs-biology_01-1-2022",
		name: "Biology",
		duration: Duration.FULL_SEMESTER,
		department: "basic-science/biology",
		difficultyLevel: DifficultyLevel.INTERMEDIATE,
	},

	{
		id: "course-bs-physics_01-x-2022",
		name: "Physics",
		duration: Duration.FULL_YEAR,
		department: "basic-science/physics",
		difficultyLevel: DifficultyLevel.INTERMEDIATE,
	},
	{
		id: "course-bs-modern_physics_01-1-2022",
		name: "Modern Physics",
		duration: Duration.FULL_SEMESTER,
		department: "basic-science/physics",
		difficultyLevel: DifficultyLevel.UPPER_INTERMEDIATE,
	},

	{
		id: "course-lng-english_lit_01-x-2022",
		name: "English Literature",
		duration: Duration.FULL_YEAR,
		department: "linguistics",
		difficultyLevel: DifficultyLevel.INTRODUCTORY,
	},

	{
		id: "course-ss-history_01-x-2022",
		name: "History",
		duration: Duration.FULL_YEAR,
		department: "social-studies",
		difficultyLevel: DifficultyLevel.INTRODUCTORY,
	},
	{
		id: "course-ss-psych_01-1-2022",
		name: "Psychology",
		duration: Duration.FULL_SEMESTER,
		department: "social-studies",
		difficultyLevel: DifficultyLevel.INTRODUCTORY,
	},
];

/*
 * A set of professors and their respective departments and courses to connect them with.
 * The other Data will be generated by Faker.JS
 */
const professorsBasicData = [
	{
		department: "basic-science/math",
		courses: [
			"course-bs-calculus_01-1-2022",
			"course-bs-calculus_02-2-2022",
		],
	},
	{
		department: "basic-science/math",
		courses: [
			"course-bs-calculus_03-x-2022",
			"course-bs-algebra_01-1-2022",
		],
		club: "club-chess-01",
	},
	{
		department: "basic-science",
		courses: [
			"course-bs-chemistry_01-1-2022",
			"course-bs-biology_01-1-2022",
		],
	},
	{
		department: "basic-science/physics",
		courses: [
			"course-bs-physics_01-x-2022",
			"course-bs-modern_physics_01-1-2022",
		],
	},

	{
		department: "linguistics",
		courses: ["course-lng-english_lit_01-x-2022"],
		club: "club-drama-01",
	},
	{
		department: "social-studies",
		courses: ["course-ss-psych_01-1-2022"],
	},
	{
		department: "social-studies",
		courses: ["course-ss-history_01-x-2022"],
		club: "club-glee-01",
	},

	{ department: "physical-education", club: "club-football-01" },
];

/*
 * A set of combinations of courses to select from when connecting students to courses
 */
const coursesSelection = [
	[
		"course-bs-calculus_01-1-2022",
		"course-bs-calculus_02-2-2022",
		"course-bs-algebra_01-1-2022",
		"course-bs-chemistry_01-1-2022",
		"course-bs-biology_01-1-2022",
		"course-bs-physics_01-x-2022",
		"course-ss-psych_01-1-2022",
	],

	[
		"course-bs-calculus_03-x-2022",
		"course-bs-chemistry_01-1-2022",
		"course-bs-biology_01-1-2022",
		"course-bs-modern_physics_01-1-2022",
		"course-lng-english_lit_01-x-2022",
		"course-ss-psych_01-1-2022",
	],

	[
		"course-bs-algebra_01-1-2022",
		"course-bs-chemistry_01-1-2022",
		"course-bs-biology_01-1-2022",
		"course-bs-physics_01-x-2022",
		"course-lng-english_lit_01-x-2022",
		"course-ss-history_01-x-2022",
		"course-ss-psych_01-1-2022",
	],
];

/*
 * This generates the professor data using the list `professorsBasicData` and Faker.JS
 */
export function* professorsGen() {
	for (const data of professorsBasicData) {
		const fName = faker.name.firstName();
		const mName = faker.name.middleName();
		const lName = faker.name.lastName();

		const name = fName + " " + lName;
		const email = faker.internet.exampleEmail(fName, lName);

		yield {
			professor: {
				id: `${fName}-${mName}-${lName}-${Math.floor(
					Math.random() * 100000,
				)}`,
				department: data.department,
				email,
				name,
			} as Professor,
			connect: {
				club: data.club,
				courses: data.courses,
			} as ProfessorConnectOptions,
		};
	}
}

/*
 * This generates the students data using Faker.JS and randomly connects the student to a certain club, also connects the students to one of the set of courses in `coursesSelection`
 */
export function* studentsGen(count: number = 1) {
	for (let index = 0; index < count; index++) {
		const birthday = faker.date.birthdate({
			min: 14,
			max: 19,
			mode: "age",
		});

		const age = new Date().getFullYear() - birthday.getFullYear();
		let year: Student["year"];

		// assuming that life is perfect
		if (age <= 15) year = SchoolYear.FRESHMAN;
		else if (age === 16) year = SchoolYear.SOPHOMORE;
		else if (age === 17) year = SchoolYear.JUNIOR;
		else year = SchoolYear.SENIOR;
		const fName = faker.name.firstName();
		const lName = faker.name.lastName();
		const student = {
			name: fName + " " + lName,
			year,
			email: faker.internet.exampleEmail(fName, lName),
			birthday,
		} as Student;

		yield {
			student,
			connect: {
				courses: coursesSelection[Math.round(Math.random() * 2)],
				club: clubsData[Math.round(Math.random() * 5)]?.id,
			} as StudentConnectOptions,
		};
	}
}

export const addClubs = async (preform = true) => {
	let clubs: any = {};

	/*
	 * Generate an AddMap for Each club then join that map to the clubs map (using spread operator) that will contain all the updates
	 */
	for (const clubData of clubsData) {
		const { map } = await FrostApp.club.getAddMap(clubData);
		clubs = { ...clubs, ...map };
	}

	/*
	 * if preform is true pass all the clubs to the update function from firebase db sdk
	 */
	if (preform) await update(ref(fireDB), clubs);

	return clubs;
};

export const addCourses = async (preform = true) => {
	let courses: any = {};

	/*
	 * Generate an AddMap for Each course then join that map to the courses map (using spread operator) that will contain all the updates
	 */
	for (const courseData of coursesData) {
		const { map } = await FrostApp.course.getAddMap(courseData);
		courses = { ...courses, ...map };
	}

	/*
	 * if preform is true pass all the courses to the update function from firebase db sdk
	 */
	if (preform) await update(ref(fireDB), courses);

	return courses;
};

export const addStudents = async (preform = true) => {
	let students: any = {};

	/*
	 * Generate an AddMap for Each student then join that map to the students map (using spread operator) that will contain all the updates
	 */
	for (const { student, connect } of studentsGen(10)) {
		const { map } = await FrostApp.student.getAddMap(student, connect);
		students = { ...students, ...map };
	}
	/*
	 * if preform is true pass all the students to the update function from firebase db sdk
	 */
	if (preform) await update(ref(fireDB), students);

	return students;
};

export const addProfessors = async (preform = true) => {
	let professors: any = {};

	/*
	 * Generate an AddMap for Each professor then join that map to the professors map (using spread operator) that will contain all the updates
	 */
	for (const profData of professorsGen()) {
		const { map } = await FrostApp.professor.getAddMap(
			profData.professor,
			profData.connect,
		);
		professors = { ...professors, ...map };
	}

	/*
	 * if preform is true pass all the professors to the update function from firebase db sdk
	 */
	if (preform) await update(ref(fireDB), professors);
	return professors;
};

export const setData = async () => {
	// we could have created one node containing all the data but we did it this way to demonstrate the uses of Frost

	const clubs = (await addClubs(false))
	const courses = (await addCourses(false))
	const professors = (await addProfessors(false))
	const students = (await addStudents(false))
	await update(ref(fireDB),{
		...clubs,
		...courses,
		...professors,
		...students,
	})
	// console.log(

	// 	{
	// 		clubs,
	// 		courses,
	// 		professors,
	// 		students,
	// 	}
	// )
};
